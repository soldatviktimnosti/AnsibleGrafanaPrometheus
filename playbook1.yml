- name: Install common dependencies
  hosts: all
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: Install required packages
      apt:
        name: [curl, wget, git, net-tools]
        state: present
  

- name: Configure K3s master
  hosts: control-plane
  become: yes
  vars:
    k3s_master_ip: "10.0.2.15"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_version: "v1.33.3+k3s1" 
  
  tasks:

    - name: Install ntpdate (для Debian)
      apt:
        name: ntpdate
        state: present
      become: yes

    - name: Update system time
      command: ntpdate -s pool.ntp.org
      become: yes

    - name: Update CA certificates
      apt:
        name: ca-certificates
        state: latest
      become: yes

    - name: Update CA trust (для Debian)
      command: update-ca-certificates
      become: yes

    - name: Download K3s with retry
      get_url:
        url: https://github.com/k3s-io/k3s/releases/download/v1.33.3+k3s1/k3s
        dest: /usr/local/bin/k3s
        mode: '0755'
        validate_certs: yes
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 5

    - name: Download K3s binary manually
      get_url:
        url: https://github.com/k3s-io/k3s/releases/download/v1.33.3+k3s1/k3s
        dest: /usr/local/bin/k3s
        mode: '0755'
        timeout: 120

    - name: Download K3s installer
      get_url:
        url: https://get.k3s.io
        dest: /tmp/install-k3s.sh
        mode: '0755'

    - name: Install K3s with custom options
      shell: |
        INSTALL_K3S_SKIP_DOWNLOAD=true \
        INSTALL_K3S_EXEC="--write-kubeconfig-mode 644 --disable traefik --node-name k3s-master --tls-san {{ k3s_master_ip }} --bind-address {{ k3s_master_ip }} --advertise-address {{ k3s_master_ip }}" \
        /tmp/install-k3s.sh
      args:
        creates: "/etc/rancher/k3s/k3s.yaml"  # Проверять по конфигу, а не бинарнику
      register: k3s_install
      until: k3s_install is succeeded
      retries: 5
      delay: 15

    - name: Debug installation result
      debug:
        var: k3s_install_result
    
    - name: Verify K3s installation with diagnostics
      block:

       - name: Verify K3s service
         command: systemctl is-active k3s
         register: k3s_status
         until: k3s_status.rc == 0
         retries: 20
         delay: 20
      
      rescue:
        # Этот блок выполнится ТОЛЬКО если Verify K3s service упадет
        - name: Check K3s service logs on failure
          command: journalctl -u k3s -n 50 --no-pager
          register: k3s_logs
        - name: Show K3s service logs
          debug:
            var: k3s_logs.stdout

    - name: Copy kubeconfig
      become: yes
      shell: |
        mkdir -p /home/vagrant/.kube && \
        cp {{ kubeconfig_path }} /home/vagrant/.kube/config && \
        chown vagrant:vagrant /home/vagrant/.kube/config
      args:
        creates: "/home/vagrant/.kube/config"

- name: Deep API health check
  hosts: control-plane
  vars: 
    k3s_master_ip: "192.168.56.101"
  tasks:
    - name: Check Kubernetes components status
      command: sudo k3s kubectl get cs
      register: components_status
      until: "'Healthy' in components_status.stdout"
      retries: 15
      delay: 15
      ignore_errors: yes

    - name: Direct port check
      wait_for:
        host: "{{ k3s_master_ip }}"
        port: 6443
        timeout: 60
      delegate_to: "{{ groups['workers'][0] }}"

    - name: Verify API with admin credentials
      shell: |
        sudo k3s kubectl get --raw='/healthz?verbose'
      register: api_health_raw
      changed_when: false
      retries: 10
      delay: 10

    - name: Show full API debug info
      debug:
        msg: |
          API STATUS DEBUG:
          Components: {{ components_status.stdout }}
          Raw API Check: {{ api_health_raw.stdout }}
          K3s Service: {{ lookup('pipe', 'sudo systemctl status k3s') }}
          Containers: {{ lookup('pipe', 'sudo crictl ps -a') }}
      when: api_health_raw.rc != 0

- name: Configure workers
  hosts: workers
  become: yes
  vars:
    k3s_master_ip: "192.168.56.101"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_version: "v1.33.3+k3s1"

  tasks:
    - name: Get master node token
      shell: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token
      delegate_to: "{{ groups['control-plane'][0] }}"
    
    - name: Download K3s binary manually
      get_url:
        url: https://github.com/k3s-io/k3s/releases/download/v1.33.3+k3s1/k3s
        dest: /usr/local/bin/k3s
        mode: '0755'
        timeout: 120
    
    - name: Download K3s agent installer
      get_url:
        url: https://get.k3s.io
        dest: /tmp/install-k3s-agent.sh
        mode: '0755'
    
    - name: Wait for K3s master to be ready
      wait_for:
        host: "{{ k3s_master_ip }}"
        port: 6443
        state: started
        timeout: 60
        delay: 10

    - name: Install K3s agent with custom options
      shell: |
        K3S_URL=https://{{ k3s_master_ip }}:6443 \
        K3S_TOKEN={{ k3s_token.stdout }} \
        INSTALL_K3S_SKIP_DOWNLOAD=true \
        INSTALL_K3S_EXEC="--node-name k3s-worker-{{ ansible_hostname }}" \
        /tmp/install-k3s-agent.sh
      args:
        creates: "/etc/rancher/k3s/k3s-agent.yaml"
      register: k3s_agent_install
      until: k3s_agent_install is succeeded
      retries: 5
      delay: 15

    - name: Verify agent status
      command: systemctl is-active k3s-agent
      register: agent_status
      until: agent_status.rc == 0
      retries: 20
      delay: 10

- name: Verify cluster
  hosts: control-plane
  become: yes
  vars:
    k3s_master_ip: "10.0.2.15"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_version: "v1.33.3+k3s1"

  tasks:
    - name: Check nodes status
      command: kubectl get nodes
      register: nodes
      until: "'k3s-master' in nodes.stdout and 'k3s-worker' in nodes.stdout"
      retries: 20
      delay: 15

- name: Install Grafana, Prometheus on master
  hosts: control-plane
  become: yes
  vars:
    k3s_master_ip: "10.0.2.15"
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    k3s_version: "v1.33.3+k3s1"

  tasks:
    - name: Install Helm
      become: yes
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: "/usr/local/bin/helm"
      register: helm_install
      until: helm_install is succeeded
      retries: 5
      delay: 15

    - name: Install Prometheus without waiting
      shell: |
        /usr/local/bin/helm repo add prometheus-community https://prometheus-community.github.io/helm-charts --force-update
        /usr/local/bin/helm repo update
        /usr/local/bin/helm upgrade --install prometheus prometheus-community/prometheus \
          --namespace monitoring \
          --create-namespace \
          --set server.service.type=NodePort \
          --set server.service.nodePort=30900 \
          --set alertmanager.service.type=NodePort \
          --set alertmanager.service.nodePort=30903 \
          --wait=false
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      register: prometheus_install
      until: prometheus_install is succeeded
      retries: 5
      delay: 15

    - name: Debug - Check what pods were created for Prometheus
      shell: |
        echo "=== All pods in monitoring namespace ==="
        kubectl get pods -n monitoring -o wide
        echo "=== Pods with labels ==="
        kubectl get pods -n monitoring --show-labels
        echo "=== Services ==="
        kubectl get svc -n monitoring
      register: prometheus_debug
      failed_when: false

    - name: Show Prometheus debug info
      debug:
        var: prometheus_debug.stdout

    - name: Wait for Prometheus with correct labels
      shell: |
        # Пробуем разные возможные лейблы для Prometheus
        kubectl wait --for=condition=ready pod \
          -l "app.kubernetes.io/name=prometheus" \
          -n monitoring \
          --timeout=1200s || \
        kubectl wait --for=condition=ready pod \
          -l "app=prometheus-server" \
          -n monitoring \
          --timeout=1200s || \
        kubectl wait --for=condition=ready pod \
          -l "component=server" \
          -n monitoring \
          --timeout=1200s || \
        echo "Trying universal wait..." && \
        kubectl wait --for=condition=ready pod --all -n monitoring --timeout=300s
      async: 1200
      poll: 15

    - name: Install Grafana without waiting
      shell: |
        /usr/local/bin/helm repo add grafana https://grafana.github.io/helm-charts --force-update
        /usr/local/bin/helm repo update
        /usr/local/bin/helm upgrade --install grafana grafana/grafana \
          --namespace monitoring \
          --create-namespace \
          --set service.type=NodePort \
          --set service.nodePort=30300 \
          --set adminPassword=admin \
          --wait=false
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      register: grafana_install
      until: grafana_install is succeeded
      retries: 5
      delay: 15

    - name: Wait for Grafana to be ready
      shell: |
        kubectl wait --for=condition=ready pod \
          -l app.kubernetes.io/name=grafana \
          -n monitoring \
          --timeout=1200s
      async: 1200
      poll: 30
